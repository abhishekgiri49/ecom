$(document).ready(function(){
    $('#addtowish').on('click',function(){
        console.log('click');
        $('#addtowish').toggleClass('red');
    });
    $('.category--sub-title').on('click',function(){
        var self = $(this);
        var child=self.children('.category--sub-category') ;
        child.toggle(500);
    });
});
/* Set rates + misc */
// var taxRate = 0.05;
var shippingRate = 15.00;
var fadeTime = 300;


/* Assign actions */
$('.product-quantity input').change( function() {
    updateQuantity(this);
});

$('.product-remove .remove').click( function() {
    removeItem(this);
});


/* Recalculate cart */
function recalculateCart()
{
    var subtotal = 0;
    // var taxtotal=0;
    /* Sum up row totals */
    // $('.product').each(function () {
    //     subtotal += parseFloat($(this).children('.product-subtotal').text());
    // });

    /* Calculate totals */
    // var tax = (price * taxRate) / 100;

    $('.cart_item').each(function () {
        // taxvalue = $(this).children('.product-unitprice').children('#cart_tax').attr('value');
        var pricevalue=$(this).children('.product-price').children('.amount').children('.price').text();
        var quantityvalue=$(this).children('.product-quantity').children('.quantity').children('input').val();
        subtotal = subtotal + (quantityvalue*pricevalue);
        // var taxprice=((quantityvalue*pricevalue)*taxvalue)/100;
        // taxtotal +=taxprice;

    });
    // var grandtotal = subtotal+taxtotal;

    /* Update totals display */
    $('.totals_value').fadeOut(fadeTime, function() {
        $('#subtotal').html(subtotal.toFixed(2));

        // $('#cart-tax').html(taxtotal.toFixed(2));

        $('#grandtotal').html(subtotal.toFixed(2));
        // if(grandtotal === 0){
        //     $('.checkout-btn').fadeOut(fadeTime);
        // }else{
        //     $('.checkout-btn').fadeIn(fadeTime);
        // }
        $('.totals_value').fadeIn(fadeTime);
        console.log(subtotal);
    });

}


/* Update quantity */
function updateQuantity(quantityInput)
{

    /* Calculate line price */
    var productRow = $(quantityInput).parent().parent().parent();
    var price = parseFloat(productRow.children('.product-price').children('.amount').children('.price').text());

    var quantity = $(quantityInput).val();
    var linePrice = price * quantity;
    // var taxy=$(quantityInput).parent().parent().children('.product-unitprice').children('#cart_tax').attr('value');
    // var actualPrice = linePrice + (linePrice * (taxy / 100));
    //
    // /* Update line price display and recalc cart totals */
    productRow.children('.product-subtotal').children('.amount').children('.price').each(function () {
        $(this).fadeOut(fadeTime, function() {
            // $(this).text(actualPrice.toFixed(2));
            $(this).text(linePrice.toFixed(2));
            recalculateCart();
            $(this).fadeIn(fadeTime);
        });
    });
    // console.log(linePrice);
}


/* Remove item from cart */
function removeItem(removeButton)
{
    /* Remove row from DOM and recalc cart total */
    var productRow = $(removeButton).parent().parent();
    productRow.slideUp(fadeTime, function() {
        productRow.remove();
        recalculateCart();
    });
}
// filtering







// account settings
function accountsettings(evt, settingName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tabslinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active-tab", "");
    }

    // Show the current tab, and add an "active" class to the link that opened the tab
    document.getElementById(settingName).style.display = "block";
    evt.currentTarget.className += " active-tab";


}
// Get the element with id="defaultOpen" and click on it
// document.getElementById("defaultOpen").click();
// alert box removal
$(document).ready(function () {

    $('button.alert--close').on('click', function() {
        removeAlert(this);
    });

    function removeAlert(removeButton){
        /* Remove row from DOM  */
        var alertRow = $(removeButton).parent();
        alertRow.slideUp(fadeTime, function() {
            alertRow.remove();
        });
    }
});
$(document).ready(function(){
    $('.user__container li a').on('click',function(){
        var select=$(this).attr('id');
        localStorage.setItem('s',select);

    });
    $('.desktop-grouplist ul li a').on('click',function(){
        var select=$(this).attr('id');
        localStorage.setItem('s',select);
    });

    var length=$('.profile__section .desktop-grouplist ul li').length;
    var get=localStorage.getItem('s');
    for(var i=0;i<length;i++){
        var block=$('.profile__section .desktop-grouplist ul li').eq(i).children('a');
        var z=block.attr('id');
        if(get==z){
            // block.attr('class','active-tab');
            block.addClass('active-tab');
            block.click();
            break;
        }

    }

});


//jQuery time
var current_fs, next_fs, previous_fs; //fieldsets
var left, opacity, scale; //fieldset properties which we will animate
var animating; //flag to prevent quick multi-click glitches

$(".next").click(function(){
    // if(animating) return false;
    // animating = true;
    // current_fs = $(this).parent().parent().parent().parent().parent();
    // next_fs = $(this).parent().parent().parent().parent().parent().next();
    current_fs = $(this).parents('fieldset');
    next_fs=$(this).parents('fieldset').next();

    //activate next step on progressbar using the index of next_fs
    $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("actively");

    //show the next fieldset
    // next_fs.show();
    next_fs.show();
    current_fs.hide();

});

$(".submit").click(function(){
    return false;
});



// vertical settings
function accountsettings(evt, settingName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tabslinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active-tab", "");
    }

    // Show the current tab, and add an "active" class to the link that opened the tab
    document.getElementById(settingName).style.display = "block";
    evt.currentTarget.className += " active-tab";


}
// Get the element with id="defaultOpen" and click on it

// document.getElementById("defaultOpen").click();

(function($) {

    $.fn.menuAim = function(opts) {
        // Initialize menu-aim for all elements in jQuery collection
        this.each(function() {
            init.call(this, opts);
        });

        return this;
    };

    function init(opts) {
        var $menu = $(this),
            activeRow = null,
            mouseLocs = [],
            lastDelayLoc = null,
            timeoutId = null,
            options = $.extend({
                rowSelector: "> li",
                submenuSelector: "*",
                submenuDirection: "right",
                tolerance: 75,  // bigger = more forgivey when entering submenu
                enter: $.noop,
                exit: $.noop,
                activate: $.noop,
                deactivate: $.noop,
                exitMenu: $.noop
            }, opts);

        var MOUSE_LOCS_TRACKED = 3,  // number of past mouse locations to track
            DELAY = 300;  // ms delay when user appears to be entering submenu

        /**
         * Keep track of the last few locations of the mouse.
         */
        var mousemoveDocument = function(e) {
            mouseLocs.push({x: e.pageX, y: e.pageY});

            if (mouseLocs.length > MOUSE_LOCS_TRACKED) {
                mouseLocs.shift();
            }
        };

        /**
         * Cancel possible row activations when leaving the menu entirely
         */
        var mouseleaveMenu = function() {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            // If exitMenu is supplied and returns true, deactivate the
            // currently active row on menu exit.
            if (options.exitMenu(this)) {
                if (activeRow) {
                    options.deactivate(activeRow);
                }

                activeRow = null;
            }
        };

        /**
         * Trigger a possible row activation whenever entering a new row.
         */
        var mouseenterRow = function() {
                if (timeoutId) {
                    // Cancel any previous activation delays
                    clearTimeout(timeoutId);
                }

                options.enter(this);
                possiblyActivate(this);
            },
            mouseleaveRow = function() {
                options.exit(this);
            };

        /*
         * Immediately activate a row if the user clicks on it.
         */
        var clickRow = function() {
            activate(this);
        };

        /**
         * Activate a menu row.
         */
        var activate = function(row) {
            if (row == activeRow) {
                return;
            }

            if (activeRow) {
                options.deactivate(activeRow);
            }

            options.activate(row);
            activeRow = row;
        };

        /**
         * Possibly activate a menu row. If mouse movement indicates that we
         * shouldn't activate yet because user may be trying to enter
         * a submenu's content, then delay and check again later.
         */
        var possiblyActivate = function(row) {
            var delay = activationDelay();

            if (delay) {
                timeoutId = setTimeout(function() {
                    possiblyActivate(row);
                }, delay);
            } else {
                activate(row);
            }
        };

        /**
         * Return the amount of time that should be used as a delay before the
         * currently hovered row is activated.
         *
         * Returns 0 if the activation should happen immediately. Otherwise,
         * returns the number of milliseconds that should be delayed before
         * checking again to see if the row should be activated.
         */
        var activationDelay = function() {
            if (!activeRow || !$(activeRow).is(options.submenuSelector)) {
                // If there is no other submenu row already active, then
                // go ahead and activate immediately.
                return 0;
            }

            var offset = $menu.offset(),
                upperLeft = {
                    x: offset.left,
                    y: offset.top - options.tolerance
                },
                upperRight = {
                    x: offset.left + $menu.outerWidth(),
                    y: upperLeft.y
                },
                lowerLeft = {
                    x: offset.left,
                    y: offset.top + $menu.outerHeight() + options.tolerance
                },
                lowerRight = {
                    x: offset.left + $menu.outerWidth(),
                    y: lowerLeft.y
                },
                loc = mouseLocs[mouseLocs.length - 1],
                prevLoc = mouseLocs[0];

            if (!loc) {
                return 0;
            }

            if (!prevLoc) {
                prevLoc = loc;
            }

            if (prevLoc.x < offset.left || prevLoc.x > lowerRight.x ||
                prevLoc.y < offset.top || prevLoc.y > lowerRight.y) {
                // If the previous mouse location was outside of the entire
                // menu's bounds, immediately activate.
                return 0;
            }

            if (lastDelayLoc &&
                loc.x == lastDelayLoc.x && loc.y == lastDelayLoc.y) {
                // If the mouse hasn't moved since the last time we checked
                // for activation status, immediately activate.
                return 0;
            }

            // Detect if the user is moving towards the currently activated
            // submenu.
            //
            // If the mouse is heading relatively clearly towards
            // the submenu's content, we should wait and give the user more
            // time before activating a new row. If the mouse is heading
            // elsewhere, we can immediately activate a new row.
            //
            // We detect this by calculating the slope formed between the
            // current mouse location and the upper/lower right points of
            // the menu. We do the same for the previous mouse location.
            // If the current mouse location's slopes are
            // increasing/decreasing appropriately compared to the
            // previous's, we know the user is moving toward the submenu.
            //
            // Note that since the y-axis increases as the cursor moves
            // down the screen, we are looking for the slope between the
            // cursor and the upper right corner to decrease over time, not
            // increase (somewhat counterintuitively).
            function slope(a, b) {
                return (b.y - a.y) / (b.x - a.x);
            }

            var decreasingCorner = upperRight,
                increasingCorner = lowerRight;

            // Our expectations for decreasing or increasing slope values
            // depends on which direction the submenu opens relative to the
            // main menu. By default, if the menu opens on the right, we
            // expect the slope between the cursor and the upper right
            // corner to decrease over time, as explained above. If the
            // submenu opens in a different direction, we change our slope
            // expectations.
            if (options.submenuDirection == "left") {
                decreasingCorner = lowerLeft;
                increasingCorner = upperLeft;
            } else if (options.submenuDirection == "below") {
                decreasingCorner = lowerRight;
                increasingCorner = lowerLeft;
            } else if (options.submenuDirection == "above") {
                decreasingCorner = upperLeft;
                increasingCorner = upperRight;
            }

            var decreasingSlope = slope(loc, decreasingCorner),
                increasingSlope = slope(loc, increasingCorner),
                prevDecreasingSlope = slope(prevLoc, decreasingCorner),
                prevIncreasingSlope = slope(prevLoc, increasingCorner);

            if (decreasingSlope < prevDecreasingSlope &&
                increasingSlope > prevIncreasingSlope) {
                // Mouse is moving from previous location towards the
                // currently activated submenu. Delay before activating a
                // new menu row, because user may be moving into submenu.
                lastDelayLoc = loc;
                return DELAY;
            }

            lastDelayLoc = null;
            return 0;
        };

        /**
         * Hook up initial menu events
         */
        $menu
            .mouseleave(mouseleaveMenu)
            .find(options.rowSelector)
            .mouseenter(mouseenterRow)
            .mouseleave(mouseleaveRow)
            .click(clickRow);

        $(document).mousemove(mousemoveDocument);

    }
})(jQuery);







jQuery(document).ready(function ($) {
    //open/close mega-navigation
    $('.cd-dropdown-trigger').on('click', function (event) {
        event.preventDefault();
        toggleNav();
    });

    //close meganavigation
    $('.cd-dropdown .cd-close').on('click', function (event) {
        event.preventDefault();
        toggleNav();
    });

    //on mobile - open submenu
    $('.has-children').children('a').on('click', function (event) {
        //prevent default clicking on direct children of .has-children
        event.preventDefault();
        var selected = $(this);
        selected.next('ul').removeClass('is-hidden').end().parent('.has-children').parent('ul').addClass('move-out');
    });

    //on desktop - differentiate between a user trying to hover over a dropdown item vs trying to navigate into a submenu's contents
    var submenuDirection = (!$('.cd-dropdown-wrapper').hasClass('open-to-left')) ? 'right' : 'left';
    $('.cd-dropdown-content').menuAim({
        activate: function (row) {
            $(row).children().addClass('is-active').removeClass('fade-out');
            if ($('.cd-dropdown-content .fade-in').length == 0) $(row).children('ul').addClass('fade-in');
        },
        deactivate: function (row) {
            $(row).children().removeClass('is-active');
            if ($('li.has-children:hover').length == 0 || $('li.has-children:hover').is($(row))) {
                $('.cd-dropdown-content').find('.fade-in').removeClass('fade-in');
                $(row).children('ul').addClass('fade-out');
            }
        },
        exitMenu: function () {
            $('.cd-dropdown-content').find('.is-active').removeClass('is-active');
            return true;
        },
        submenuDirection: submenuDirection,
    });

    //submenu items - go back link
    $('.go-back').on('click', function () {
        var selected = $(this),
            visibleNav = $(this).parent('ul').parent('.has-children').parent('ul');
        selected.parent('ul').addClass('is-hidden').parent('.has-children').parent('ul').removeClass('move-out');
    });

    function toggleNav() {
        var navIsVisible = (!$('.cd-dropdown').hasClass('dropdown-is-active')) ? true : false;
        $('.cd-dropdown').toggleClass('dropdown-is-active', navIsVisible);
        $('.cd-dropdown-trigger').toggleClass('dropdown-is-active', navIsVisible);
        if (!navIsVisible) {
            $('.cd-dropdown').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function () {
                $('.has-children ul').addClass('is-hidden');
                $('.move-out').removeClass('move-out');
                $('.is-active').removeClass('is-active');
            });
        }
    }


});
$(function () {
    $(".comment").slice(0, 3).show();

    $("#loadMore").on('click', function (e) {
        e.preventDefault();
        $(".comment:hidden").slice(0, 3).slideDown();
        if ($(".comment:hidden").length == 0) {
            $("#loadMore").fadeOut('slow');
        }
        // $('html,body').animate({
        //     scrollTop: $(this).offset().top
        // }, 1500);
    });
});


$(function() {
    $('.grid .lazy').lazy({
        appendScroll: $('.grid')
    });
});


jQuery(document).ready(function($){
    $(".dropdown-button").dropdown();
    $('.modal').modal();
    $(".signup-toggle").click(function(){
        $(this).hide();
        $(".signupForm").show(300);
        $('.login-form').hide();
        $(".policy").css("visibility","visible");
    });
    $('.forgotpassword').click(function(){
        $(this).hide();
        $('.forgotpassowrd-form').show(300);
        $(".login-form,.signup-toggle").hide();
    });
    $('.returning-customer').click(function(){
        $('.forgotpassword,.login-form,.signup-toggle').show(300);
        $(".signupForm,.forgotpassowrd-form").hide();
    });

    $('#vendor-continue').click(function(){
        $(this).hide();
        $('.detailForm').show(300);
        $('.vendorsignup').hide();
    });
    $('.returning-vendor').click(function(){
        $('.vendorsignup,#vendor-continue').show(300);
        $(".detailForm").hide();
    });

//    checkout payment
    $('.payment_method input').click(function(){
        $('.payment_box').hide(300);
        $(this).parent().find('.payment_box').slideDown();
    });


});



$(document).ready(function(){
    $('.main-slider').owlCarousel({
        loop:true,
        margin:0,
        nav:false,
        items:1,
        animateOut: 'fadeOut',
        autoplay:true,
        smartSpeed:1000,
        dots:true,
        navText : ["<i class='fas fa-angle-left fa-2x'></i>","<i class='fas fa-angle-right fa-2x'></i>"],
        responsive:{
            0:{
                items:1
            }
        }
    });
    $('.product-description-slider').owlCarousel({
        loop:true,
        margin:0,
        nav:true,
        items:1,
        autoplay:true,
        smartSpeed:2000,
        dots:true,
        navText : ["<i class='fas fa-angle-left fa-2x'></i>","<i class='fas fa-angle-right fa-2x'></i>"],
        responsive:{
            0:{
                items:1
            }
        }
    });
    $('.product-carousel').owlCarousel({
        loop:true,
        margin:5,
        nav:true,
        items:4,
        pagination: false,
        autoplay:false,
        smartSpeed:1000,
        navText : ["<i class='fa fa-chevron-left fa-1x'></i>","<i class='fa fa-chevron-right fa-1x'></i>"],
        dots:false,
        responsive:{
            0:{
                items:1
            },
            400:{
                items:2
            },
            600:{
                items:3
            },
            1000:{
                items:6
            }
        }
    });
    $('.customers-testimonials').owlCarousel({
        loop: true,
        center: true,
        items: 1,
        nav:true,
        navText : ["<i class='fas fa-angle-left fa-2x'></i>","<i class='fas fa-angle-right fa-2x'></i>"],
        margin: 0,
        autoplay: true,
        dots:true,
        autoplayTimeout: 8500,
        smartSpeed: 500,
        responsive: {
            0: {
                items: 1
            }
        }
    });

    $('.owl-carousel').owlCarousel({
        loop:true,
        // margin:10,
        nav:true,
        items:4,
        pagination: false,
        autoplay:false,
        smartSpeed:1000,
        navText : ["<i class='fa fa-chevron-left fa-1x'></i>","<i class='fa fa-chevron-right fa-1x'></i>"],
        dots:true,
        responsive:{
            0:{
                items:1
            },
            400:{
                items:2
            },
            600:{
                items:3
            },
            1000:{
                items:4
            }
        }
    });

//     var owl = $('.owl-carousel');
//     // add animate.css class(es) to the elements to be animated
//     function setAnimation ( _elem, _InOut ) {
//         // Store all animationend event name in a string.
//         // cf animate.css documentation
//         var animationEndEvent = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
//
//         _elem.each ( function () {
//             var $elem = $(this);
//             var $animationType = 'animated ' + $elem.data( 'animation-' + _InOut );
//
//             $elem.addClass($animationType).one(animationEndEvent, function () {
//                 $elem.removeClass($animationType); // remove animate.css Class at the end of the animations
//             });
//         });
//     }
//
// // Fired before current slide change
//     owl.on('change.owl.carousel', function(event) {
//         var $currentItem = $('.owl-item', owl).eq(event.item.index);
//         var $elemsToanim = $currentItem.find("[data-animation-out]");
//         setAnimation ($elemsToanim, 'out');
//     });
//
// // Fired after current slide has been changed
//     var round = 0;
//     owl.on('changed.owl.carousel', function(event) {
//
//         var $currentItem = $('.owl-item', owl).eq(event.item.index);
//         var $elemsToanim = $currentItem.find("[data-animation-in]");
//
//         setAnimation ($elemsToanim, 'in');
//     })
//
//     owl.on('translated.owl.carousel', function(event) {
//         console.log (event.item.index, event.page.count);
//
//         if (event.item.index == (event.page.count - 1))  {
//             if (round < 1) {
//                 round++
//                 console.log (round);
//             } else {
//                 owl.trigger('stop.owl.autoplay');
//                 var owlData = owl.data('owl.carousel');
//                 owlData.settings.autoplay = false; //don't know if both are necessary
//                 owlData.options.autoplay = false;
//                 owl.trigger('refresh.owl.carousel');
//             }
//         }
//     });

});


$('#top').click(function () {
    $('body,html').animate({
        scrollTop: 0
    }, 600);
    return false;
});

$(window).scroll(function () {
    if ($(this).scrollTop() > 750) {
        $('.totop a').fadeIn();
    } else {
        $('.totop a').fadeOut();
    }
});

(function($){
    $('#thumbcarousel').carousel(0);
    var $thumbItems = $('#thumbcarousel .item');
    $('#carousel').on('slide.bs.carousel', function (event) {
        var $slide = $(event.relatedTarget);
        var thumbIndex = $slide.data('thumb');
        var curThumbIndex = $thumbItems.index($('#thumbcarousel .item.active').get(0));
        if (curThumbIndex>thumbIndex) {
            $('#thumbcarousel').one('slid.bs.carousel', function (event) {
                $('#thumbcarousel').carousel(thumbIndex);
            });
            if (curThumbIndex === ($thumbItems.length-1)) {
                $('#thumbcarousel').carousel('next');
            } else {
                $('#thumbcarousel').carousel(numThumbItems-1);
            }
        } else {
            $('#thumbcarousel').carousel(thumbIndex);
        }
    });



})(jQuery);



var w = $('.scrollnav-top').width();

if(w < 426 ){
    $('.lfix').show();
    $('.rfix').show();
}else{
    $('.lfix').hide();
    $('.rfix').hide();
}


$(document).ready(function () {
    $('.nextservice').click(function () {
        $('#serviceone').hide();
        $('#servicetwo').fadeIn();
    });
    $('.returnservice').click(function () {
        $('#servicetwo').hide();
        $('#serviceone').fadeIn();
    });

    //    service header
    $(window).scroll(function(){
        var scrollPos = $(document).scrollTop();
        if(scrollPos > 200){
            $('.site-header.service-header').addClass('showcolor');
        } else{
            $('.site-header.service-header').removeClass('showcolor');
        }

    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
